<?xml version="1.0" encoding="UTF-8"?>

<project name="connector-fileV4" default="build" basedir=".">

  <!-- ========================= PROPERTIES ============================= -->
  <property file="${user.home}/google-enterprise-connector-file.properties" />
  <property file="google-enterprise-connector-file.properties" />
  <property file="version.properties" />

  <property name="COMPILE_DEBUG_FLAG" value="true" />
  <property name="COMPILE_DEBUG_LEVEL" value="source,lines,vars" />
  <property name="COMPILE_TARGET" value="7" />
  <property name="COMPILE_BOOTCLASSPATH" value="${build.bootclasspath}" />

  <!-- Define Directories. -->
  <property name="build" value="build" />
  <property name="config" value="filenet/config" />
  <property name="downloads.dir" value="downloads" />

  <property name="src" value="filenet/source/java" />
  <property name="classes" location="build/classes" />

  <property name="src-test" value="filenet/source/javatests" />
  <property name="classes-test" value="build/test" />

  <property name="jar.dir" location="build/jar" />
  <property name="jarfile"  value="${jar.dir}/connector-file4.jar" />

  <property name="file.jarfile" location="${build.ceclient.lib.dir}/Jace.jar" />
  <fail>
    <condition>
      <not><and>
        <isset property="build.ceclient.lib.dir"/>
        <available file="${file.jarfile}"/>
      </and></not>
    </condition>
    The build.ceclient.lib.dir property must be set in<!--
    --> google-enterprise-connector-file.properties, and point at a <!--
    --> directory that includes Jace.jar.
  </fail>

  <property name="connector-manager-projects.dir"
            location="${build.connector.manager.home}/projects" />
  <property name="connector-manager.dir"
            location="${connector-manager-projects.dir}/connector-manager" />
  <property name="connector-manager-thirdparty-jar.dir"
            location="${connector-manager.dir}/third-party" />
  <property name="spi.jar.dir" value="${connector-manager.dir}/dist/jarfile" />
  <property name="spi.jarfile" value="${spi.jar.dir}/connector-spi.jar" />

  <propertyset id="javatest.properties">
    <propertyref prefix="test."/>
    <mapper type="glob" from="test.*" to="*"/>
  </propertyset>

  <!-- =========================== PATHS =============================== -->
  <path id="compile.prod.classpath">
    <pathelement location="${file.jarfile}" />
    <pathelement location="${spi.jarfile}" />
    <pathelement location="adaptor-4.1.3-31-g889ec27.jar" />
    <fileset dir="${connector-manager-thirdparty-jar.dir}">
      <include name="prod/*.jar" />
    </fileset>
  </path>

  <path id="compile.tests.classpath">
    <path refid="compile.prod.classpath" />
    <fileset dir="${connector-manager-thirdparty-jar.dir}">
      <include name="tests/*.jar" />
    </fileset>
    <pathelement location="${jarfile}" />
  </path>

  <property file="${config}/build_code_coverage.properties"/>
  <path id="cobertura.classpath">
    <fileset dir="${connector-manager-thirdparty-jar.dir}/cobertura">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <!-- =========================== TASKS =============================== -->
  <include file="${connector-manager-projects.dir}/svnbuild.xml" as="svn"/>

  <target name="build" depends="init,compile,compile_tests,jar" />

  <target name="init">
    <mkdir dir="${build}" />
    <mkdir dir="${classes}" />
    <mkdir dir="${classes-test}" />
    <mkdir dir="${jar.dir}" />
    <mkdir dir="${downloads.dir}" />
  </target>

  <target name="compile" depends="init">
    <!-- compile java source files -->
    <javac srcdir="${src}" destdir="${classes}"
           includeantruntime="false"
           debug="${COMPILE_DEBUG_FLAG}" debuglevel="${COMPILE_DEBUG_LEVEL}"
           target="${COMPILE_TARGET}" source="${COMPILE_TARGET}">
      <!-- CM, GData, and P8 JAR Class-Path references are not available. -->
      <compilerarg line="-Xlint -Xlint:-serial -Xlint:-path"/>
      <bootclasspath path="${COMPILE_BOOTCLASSPATH}"/>
      <classpath refid="compile.prod.classpath" />
    </javac>
  </target>

  <target name="compile-test">
    <echo message="The compile-test target is deprecated. Use compile_tests." />
  </target>

  <target name="compile-tests">
    <echo
        message="The compile-tests target is deprecated. Use compile_tests." />
  </target>

  <target name="compile_tests" depends="jar">
    <!-- compile java source files for tests -->
    <javac srcdir="${src-test}" destdir="${classes-test}"
           includeantruntime="false"
           debug="${COMPILE_DEBUG_FLAG}" debuglevel="${COMPILE_DEBUG_LEVEL}"
           target="${COMPILE_TARGET}" source="${COMPILE_TARGET}">
      <!-- CM, GData, and P8 JAR Class-Path references are not available. -->
      <compilerarg line="-Xlint -Xlint:-serial -Xlint:-path"/>
      <bootclasspath path="${COMPILE_BOOTCLASSPATH}"/>
      <classpath refid="compile.tests.classpath" />
    </javac>
  </target>

  <target name="jar" description="Create connector-file4.jar file."
          depends="compile,svn.svn-branch-version">
    <tstamp />
    <jar jarfile="${jarfile}">
      <fileset dir="${config}">
          <include name="**/*.xml"/>
          <exclude name="**/logging.properties"/>
          <include name="**/*.properties"/>
      </fileset>
      <fileset dir="${classes}"/>
      <fileset file="jaas.conf"/>

      <!--creation of manifest file-->
      <manifest>
        <attribute name="Implementation-Title"
                   value="Google Search Appliance Connector for FileNet"/>
        <attribute name="Implementation-Version"
                   value="${version} (build ${svn.branch.version} ${TODAY})"/>
        <attribute name="Implementation-Vendor" value="Google Inc."/>
        <attribute name="Specification-Title" value="Connector Manager SPI"/>
        <attribute name="Specification-Version" value="${version.spi}"/>
        <attribute name="Specification-Vendor" value="Google Inc."/>
        <attribute name="Main-Class" value="com.google.enterprise.connector.filenet4.FileMain" />
      </manifest>
    </jar>
  </target>

  <target name="clean" description="Deletes all build files.">
    <delete dir="${build}" />
    <delete dir="${downloads.dir}" />
  </target>

  <!--Cobertura Report Generation -->

  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

  <target name="init_code_coverage">
    <mkdir dir="${instrumented.dir}" />
    <mkdir dir="${reports.xml.dir}" />
    <mkdir dir="${reports.html.dir}" />
    <mkdir dir="${coverage.xml.dir}" />
    <mkdir dir="${coverage.summaryxml.dir}" />
    <mkdir dir="${coverage.html.dir}" />
  </target>

  <target name="compile_code_coverage" depends="init_code_coverage,compile"/>

  <target name="instrument" depends="compile_code_coverage">
    <!--
        Remove the coverage data file and any old instrumentation.
    -->
    <delete file="cobertura.ser"/>
    <delete dir="${instrumented.dir}" />

    <!--
        Instrument the application classes, writing the
        instrumented classes into ${instrumented.dir}.
    -->
    <cobertura-instrument todir="${instrumented.dir}">
      <!--
          The following line causes instrument to ignore any
          source line containing a reference to log4j, for the
          purposes of coverage reporting.
      -->
      <ignore regex="org.apache.log4j.*" />

      <!-- Cobertura needs prod class dependencies during instrumentation. -->
      <auxClassPath refid="compile.prod.classpath"/>

      <fileset dir="${classes}">
        <!--
            Instrument all the application classes, but
            don't instrument the test classes.
        -->
        <include name="**/*.class" />
        <exclude name="**/*Test.class" />
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="run_tests">
    <echo message="The run_tests target is deprecated. Use test instead." />
  </target>

  <target name="test" depends="compile_tests,instrument">
    <property name="test.suite" value="*" />
    <junit fork="yes" dir="${basedir}" failureProperty="test.failed">
      <!--
          Note the classpath order: instrumented classes are before the
          original (uninstrumented) classes.  This is important.

          The instrumented classes reference classes used by the
          Cobertura runtime, so Cobertura and its dependencies
          must be on your classpath.
      -->
      <sysproperty key="net.sourceforge.cobertura.datafile"
                   file="${basedir}/cobertura.ser" />
      <classpath>
        <pathelement location="${instrumented.dir}" />
        <path refid="cobertura.classpath" />
        <path refid="compile.tests.classpath" />
        <pathelement location="${classes-test}" />
      </classpath>

      <syspropertyset refid="javatest.properties"/>
      <formatter type="plain" usefile="false"/>
      <formatter type="xml" />
      <batchtest todir="${reports.xml.dir}" unless="testcase">
        <fileset dir="${src-test}">
          <include name="**/${test.suite}Test.java" />
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${reports.xml.dir}">
      <fileset dir="${reports.xml.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${reports.html.dir}" />
    </junitreport>

    <fail if="test.failed" message="Test failure"/>
  </target>

  <target name="coverage-report">
    <!--
        Generate an XML file containing the coverage data using
        the "srcdir" attribute.
    -->
    <cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}"
                      format="xml" />
  </target>

  <target name="alternate-coverage-report">
    <!--
        Generate a series of HTML files containing the coverage
        data in a user-readable form using nested source filesets.
    -->
    <cobertura-report destdir="${coverage.html.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
    </cobertura-report>
  </target>

  <target name="clean_code_coverage" description="Remove all files created by the build/test process.">
    <delete dir="${instrumented.dir}" />
    <delete dir="${reports.dir}" />
    <delete file="cobertura.log" />
    <delete file="cobertura.ser" />
  </target>

  <target name="run_code_coverage"
          depends="test,coverage-report,alternate-coverage-report"
          description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>

  <!-- Zip and Archive -->
  <target name="init-package" depends="svn.svn-branch">
    <property name="downloads.prefix" value="connector-file4-${svn.branch}" />
    <property name="repackage.prefix" value="connector-file4-${version}"/>
  </target>

  <target name="downloads" depends="jar,init-package">
    <property name="bin.archive" value="${downloads.prefix}" />
    <zip destfile="${downloads.dir}/${bin.archive}.zip">
      <zipfileset file="${jarfile}" prefix="${bin.archive}" />
      <zipfileset file="RELEASE_NOTES" prefix="${bin.archive}" />
      <zipfileset file="README.txt" prefix="${bin.archive}" />
      <zipfileset file="jaas.conf" prefix="${bin.archive}/Config" />
      <zipfileset dir="../License" prefix="${bin.archive}/License" />
      <zipfileset file="${config}/config/logging.properties"
                  prefix="${bin.archive}/Config" />
    </zip>
    <checksum algorithm="SHA-1">
      <fileset dir="${downloads.dir}">
        <include name="${bin.archive}*" />
      </fileset>
    </checksum>

    <property name="src.archive" value="${downloads.prefix}-src" />
    <zip destfile="${downloads.dir}/${src.archive}.zip">
      <zipfileset file="Build_ReadMe.txt" prefix="${src.archive}" />
      <zipfileset file="../RELEASE_NOTES" prefix="${src.archive}" />
      <zipfileset file="README.txt" prefix="${src.archive}" />
      <zipfileset dir="../License" prefix="${src.archive}/License" />
      <zipfileset file="version.properties" prefix="${src.archive}/source" />
      <zipfileset file="build.xml" prefix="${src.archive}/source" />
      <zipfileset dir="filenet" prefix="${src.archive}/source/filenet" />
    </zip>
    <checksum algorithm="SHA-1">
      <fileset dir="${downloads.dir}">
        <include name="${src.archive}*" />
      </fileset>
    </checksum>
  </target>

  <target name="repackage" depends="init-package"
          description="Repackage release candidate files for release.">
    <repackage-downloads downloads.dir="${downloads.dir}"
                         downloads.prefix="${downloads.prefix}"
                         repackage.prefix="${repackage.prefix}" />
  </target>

  <target name="everything" depends="clean,build,test,downloads" />

</project>
